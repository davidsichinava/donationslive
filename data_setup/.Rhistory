library(httr)
library(jsonlite)
library(tibble)
setwd("D:/Dropbox (Personal)/My projects/scratchpad/tendermonitor/data_setup")
# donations <- readxl::read_excel("donattions_full")
donations <- readxl::read_excel("../donations_full.xls")
donations |>
mutate(
# first four digits of თარიღი
year = substr(თარიღი, 1, 4)
) |>
type_convert() |>
filter(year > 2012) |>
select(
c(3, 4, 5, 6, 8)
) |>
set_names(
c(
"name", "id", "amount", "party", "year"
)
) -> donations_cleaned
donations_cleaned |>
filter(
# ოთხი ძირითდი პარტია
#     str_detect(party, "კოალიცია ცვლილებისთვის|ნაციონალური მოძრაობა|ევროპული საქართველო|ლელო|გახარია")
) |>
group_by(
id, party
) |>
count() -> id_parties
library(tidyverse)
donations |>
mutate(
# first four digits of თარიღი
year = substr(თარიღი, 1, 4)
) |>
type_convert() |>
filter(year > 2012) |>
select(
c(3, 4, 5, 6, 8)
) |>
set_names(
c(
"name", "id", "amount", "party", "year"
)
) -> donations_cleaned
donations_cleaned |>
filter(
# ოთხი ძირითდი პარტია
#     str_detect(party, "კოალიცია ცვლილებისთვის|ნაციონალური მოძრაობა|ევროპული საქართველო|ლელო|გახარია")
) |>
group_by(
id, party
) |>
count() -> id_parties
id_parties
# companyinfo.ge-ზე განთავსებული ინდივიდების მონაცემები
individuals |>
filter(
idNumber %in% unique(id_parties$id) # ამოვიღოთ მხოლოდ ის ინდივიდები, რომლებიც ოპოზიციის შემომწირველები არიან
) |>
select(id) -> individuals_filtered
individuals_filtered
read_rds("../individuals.rds")
# donations <- readxl::read_excel("donattions_full")
donations <- readxl::read_excel("../donations_full.xls")
# companyinfo.ge-ზე განთავსებული ინდივიდების მონაცემები
individuals |>
filter(
idNumber %in% unique(id_parties$id) # ამოვიღოთ მხოლოდ ის ინდივიდები, რომლებიც ოპოზიციის შემომწირველები არიან
) |>
select(id) -> individuals_filtered
read_rds("../individuals.rds") -> individuals
# companyinfo.ge-ზე განთავსებული ინდივიდების მონაცემები
individuals |>
filter(
idNumber %in% unique(id_parties$id) # ამოვიღოთ მხოლოდ ის ინდივიდები, რომლებიც ოპოზიციის შემომწირველები არიან
) |>
select(id) -> individuals_filtered
individuals_filtered
rel_url <- "https://api.companyinfo.ge/api/relationship-graph?person="
get_rel_url_list <- function(
url = rel_url,
individual,
timeout_s   = 15,
retry_times = 5,
retry_pause = 0.2
) {
res <- RETRY(
"GET", paste0(url, individual, "&level=1"),
times = retry_times,
pause_base = retry_pause,
accept_json(),
timeout(timeout_s)
)
stop_for_status(res)
txt <- content(res, as = "text", encoding = "UTF-8")
parsed <- tryCatch(fromJSON(txt, simplifyVector = TRUE)|> as_tibble() |> mutate(individual := individual),
error = function(e) stop("JSON parse failed: ", e$message))
# If payload includes $items, return that; otherwise return the whole thing as a tibble.
out <- parsed %||% parsed
as_tibble(out)
}
safe_get_individual <- purrr::possibly(get_rel_url_list, otherwise = tibble(), quiet = FALSE)
individual_all <- individuals_filtered$id |> unname() |> unlist()
relations <- map_dfr(individual_all, ~{
df <- safe_get_individual(individual = .x)
# Sys.sleep(0.25)             # throttle a bit
if (nrow(df)) mutate(df, individual = .x) else df
}, .progress = TRUE)
View(individuals_filtered)
relations
individual_all
a <- read_rds("../relations.rds")
nrow(A)
nrow(a)
write_rds(relations, "relations.rds")
